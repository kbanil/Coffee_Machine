type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {

      private static final Scanner scanner = new Scanner(System.in);
      private int waterQty;
      private int milkQty;
      private int coffeeBeansQty;
      private int cupsQty;
      private int money;

      public static void main(String[] args) {
        final int initialWater = 400;
        final int initialMilk = 540;
        final int initialCoffeeBeans = 120;
        final int initialCups = 9;
        final int initialMoney = 550;

        final CoffeeMachine coffeeMachine = new CoffeeMachine();
        coffeeMachine.fill(initialWater, initialMilk, initialCoffeeBeans, initialCups);
        coffeeMachine.addMoney(initialMoney);

        outer:
        while (true) {
          System.out.println("Write action (buy, fill, take, remaining, exit):");
          final String action = scanner.next();
          switch (action) {
            case "buy":
              System.out.println(
                  "What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:");
              final String buyStr = scanner.next();
              if ("back".equalsIgnoreCase(buyStr)) {
                continue;
              }
              final int id = Integer.parseInt(buyStr);
              Coffee coffee = Coffee.parseInt(id);
              coffeeMachine.buy(coffee);
              break;
            case "fill":
              System.out.println("Write how many ml of water do you want to add:");
              final int waterQty = scanner.nextInt();
              System.out.println("Write how many ml of milk do you want to add:");
              final int milkQty = scanner.nextInt();
              System.out.println("Write how many grams of coffee beans do you want to add:");
              final int coffeeBeansQty = scanner.nextInt();
              System.out.println("Write how many disposable cups of coffee do you want to add:");
              final int numberOfCups = scanner.nextInt();
              coffeeMachine.fill(waterQty, milkQty, coffeeBeansQty, numberOfCups);
              break;
            case "take":
              final int amount = coffeeMachine.take();
              System.out.println("I gave you $" + amount);
              break;
            case "remaining":
              System.out.println(coffeeMachine);
              break;
            case "exit":
              break outer;
          }
        }
      }

      private void addMoney(final int initialMoney) {
        this.money += initialMoney;
      }

      private void fillWater(final int waterQty) {
        this.waterQty += waterQty;
      }

      private void fillMilk(final int milkQty) {
        this.milkQty += milkQty;
      }

      private void fillCoffeeBeans(final int coffeeBeansQty) {
        this.coffeeBeansQty += coffeeBeansQty;
      }

      private void fillDisposableCups(final int cupsQty) {
        this.cupsQty += cupsQty;
      }

      public void fill(
          final int waterQty, final int milkQty, final int coffeeBeansQty, final int cupsQty) {
        fillWater(waterQty);
        fillMilk(milkQty);
        fillCoffeeBeans(coffeeBeansQty);
        fillDisposableCups(cupsQty);
      }

      private boolean hasEnoughWater(int numberOfCoffee, Coffee coffeeType) {
        if (waterQty >= (numberOfCoffee * coffeeType.water)) {
          return true;
        } else {
          System.out.println("Sorry, not enough water!");
          return false;
        }
      }

      private boolean hasEnoughMilk(int numberOfCoffee, Coffee coffeeType) {
        if (milkQty >= (numberOfCoffee * coffeeType.milk)) {
          return true;
        } else {
          System.out.println("Sorry, not enough milk!");
          return false;
        }
      }

      private boolean hasEnoughCoffeeBeans(int numberOfCoffee, Coffee coffeeType) {
        if (coffeeBeansQty >= (numberOfCoffee * coffeeType.coffeeBeans)) {
          return true;
        } else {
          System.out.println("Sorry, not enough coffee beans!");
          return false;
        }
      }

      private boolean hasEnoughCups(int numberOfCoffee) {
        if (cupsQty >= numberOfCoffee) {
          return true;
        } else {
          System.out.println("Sorry, not enough cups!");
          return false;
        }
      }

      public boolean canMakeCoffee(int numberOfCoffee, Coffee coffeeType) {
        if (numberOfCoffee == 0) return true;
        return hasEnoughCups(numberOfCoffee)
            && hasEnoughWater(numberOfCoffee, coffeeType)
            && hasEnoughMilk(numberOfCoffee, coffeeType)
            && hasEnoughCoffeeBeans(numberOfCoffee, coffeeType);
      }

      public void buy(Coffee coffee) {
        if (canMakeCoffee(1, coffee)) {
          System.out.println("I have enough resources, making you a coffee!");
          waterQty -= coffee.water;
          milkQty -= coffee.milk;
          coffeeBeansQty -= coffee.coffeeBeans;
          cupsQty--;
          money += coffee.cost;
        }
      }

      public int take() {
        int amount = money;
        money = 0;
        return amount;
      }

      @Override
      public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("The coffee machine has:\n")
            .append(waterQty)
            .append(" of water\n")
            .append(milkQty)
            .append(" of milk\n")
            .append(coffeeBeansQty)
            .append(" of coffee beans\n")
            .append(cupsQty)
            .append(" of disposable cups\n")
            .append("$")
            .append(money)
            .append(" of money\n");
        return sb.toString();
      }

      private enum Coffee {
        ESPRESSO(250, 0, 16, 4),
        LATTE(350, 75, 20, 7),
        CAPUCCINO(200, 100, 12, 6);

        final int water;
        final int milk;
        final int coffeeBeans;
        final int cost;

        Coffee(int water, int milk, int coffeeBeans, int cost) {
          this.water = water;
          this.milk = milk;
          this.coffeeBeans = coffeeBeans;
          this.cost = cost;
        }

        public static Coffee parseInt(int id) {
          switch (id) {
            case 1:
              return ESPRESSO;
            case 2:
              return LATTE;
            case 3:
              return CAPUCCINO;
          }
          return null;
        }
      }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
record: -1
